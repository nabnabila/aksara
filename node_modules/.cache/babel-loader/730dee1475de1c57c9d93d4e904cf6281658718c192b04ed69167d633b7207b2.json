{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksara\\\\src\\\\components\\\\isikuissandhangan\\\\NggolekiTembangSandhangan.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport contohta from \"../../assets/image/aksara1/contohta.png\";\nimport contohca from \"../../assets/image/aksara1/contohca.png\";\nimport contohga from \"../../assets/image/aksara1/contohga.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NggolekiTembang = () => {\n  _s();\n  const initialClues = [{\n    word: \"TARI\",\n    image: contohta\n  }, {\n    word: \"MACA\",\n    image: contohca\n  }, {\n    word: \"GAWA\",\n    image: contohga\n  }];\n  const gridSize = 10;\n  const [grid, setGrid] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [clues, setClues] = useState(initialClues);\n  const navigate = useNavigate();\n\n  // Utility function to create an empty grid\n  const createEmptyGrid = () => {\n    return Array.from({\n      length: gridSize\n    }, () => Array.from({\n      length: gridSize\n    }, () => \"\"));\n  };\n\n  // Place words into the grid\n  const placeWordsInGrid = grid => {\n    clues.forEach(clue => {\n      const word = clue.word;\n      let placed = false;\n      while (!placed) {\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\n        const row = Math.floor(Math.random() * gridSize);\n        const col = Math.floor(Math.random() * gridSize);\n        if (canPlaceWord(word, row, col, direction, grid)) {\n          placeWord(word, row, col, direction, grid);\n          placed = true;\n        }\n      }\n    });\n  };\n  const canPlaceWord = (word, row, col, direction, grid) => {\n    if (direction === 0 && col + word.length > gridSize) return false;\n    if (direction === 1 && row + word.length > gridSize) return false;\n    if (direction === 2 && (row + word.length > gridSize || col + word.length > gridSize)) return false;\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      if (grid[currentRow][currentCol] !== \"\" && grid[currentRow][currentCol] !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (word, row, col, direction, grid) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      grid[currentRow][currentCol] = word[i];\n    }\n  };\n\n  // Fill the remaining cells with random letters\n  const fillGridWithRandomLetters = grid => {\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        if (grid[row][col] === \"\") {\n          grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n  };\n\n  // Initialize the grid when the component mounts\n  useEffect(() => {\n    const newGrid = createEmptyGrid();\n    placeWordsInGrid(newGrid);\n    fillGridWithRandomLetters(newGrid);\n    setGrid(newGrid);\n  }, [clues]);\n\n  // Handle user selection of cells\n  const handleCellClick = (row, col) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.row === row && cell.col === col);\n    if (cellIndex !== -1) {\n      // Deselect if already selected\n      const newSelection = [...selectedCells];\n      newSelection.splice(cellIndex, 1);\n      setSelectedCells(newSelection);\n    } else {\n      // Add to selection\n      setSelectedCells([...selectedCells, {\n        row,\n        col\n      }]);\n    }\n  };\n\n  // Clear the current selection\n  const clearSelection = () => {\n    setSelectedCells([]);\n  };\n\n  // Check if the selected cells form a valid word\n  useEffect(() => {\n    const selectedWord = selectedCells.map(({\n      row,\n      col\n    }) => grid[row][col]).join(\"\");\n    const foundClue = clues.find(clue => clue.word === selectedWord);\n    if (foundClue) {\n      setFoundWords([...foundWords, foundClue.word]);\n      setSelectedCells([]);\n    }\n  }, [selectedCells]);\n  const allWordsFound = foundWords.length === clues.length;\n  const goToNextPage = () => {\n    navigate(\"/Sandhangan/kuis5/ngaturukarasandhangan\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordsearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nggoleki Tembang Sandhangan\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-clues\",\n      children: clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clue\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: clue.image,\n          alt: clue.word,\n          style: {\n            width: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-grid\",\n        children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wordsearch-row\",\n          children: row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `cell ${selectedCells.find(c => c.row === rowIndex && c.col === colIndex) ? \"selected\" : \"\"}`,\n            onClick: () => handleCellClick(rowIndex, colIndex),\n            children: letter\n          }, colIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-found-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Kata:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), foundWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)), allWordsFound && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: goToNextPage,\n          className: \"next-page-button\",\n          children: \"Next Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearSelection,\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(NggolekiTembang, \"w47S50erTQ4LSuQlppulqiyiiZA=\", false, function () {\n  return [useNavigate];\n});\n_c = NggolekiTembang;\nexport default NggolekiTembang;\nvar _c;\n$RefreshReg$(_c, \"NggolekiTembang\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","contohta","contohca","contohga","jsxDEV","_jsxDEV","NggolekiTembang","_s","initialClues","word","image","gridSize","grid","setGrid","foundWords","setFoundWords","selectedCells","setSelectedCells","clues","setClues","navigate","createEmptyGrid","Array","from","length","placeWordsInGrid","forEach","clue","placed","direction","Math","floor","random","row","col","canPlaceWord","placeWord","i","currentRow","currentCol","fillGridWithRandomLetters","String","fromCharCode","newGrid","handleCellClick","cellIndex","findIndex","cell","newSelection","splice","clearSelection","selectedWord","map","join","foundClue","find","allWordsFound","goToNextPage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","style","width","rowIndex","letter","colIndex","c","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksara/src/components/isikuissandhangan/NggolekiTembangSandhangan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport contohta from \"../../assets/image/aksara1/contohta.png\";\r\nimport contohca from \"../../assets/image/aksara1/contohca.png\";\r\nimport contohga from \"../../assets/image/aksara1/contohga.png\";\r\n\r\nconst NggolekiTembang = () => {\r\n  const initialClues = [\r\n    { word: \"TARI\", image: contohta },\r\n    { word: \"MACA\", image: contohca },\r\n    { word: \"GAWA\", image: contohga },\r\n  ];\r\n\r\n  const gridSize = 10;\r\n  const [grid, setGrid] = useState([]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [clues, setClues] = useState(initialClues);\r\n  const navigate = useNavigate();\r\n\r\n  // Utility function to create an empty grid\r\n  const createEmptyGrid = () => {\r\n    return Array.from({ length: gridSize }, () =>\r\n      Array.from({ length: gridSize }, () => \"\")\r\n    );\r\n  };\r\n\r\n  // Place words into the grid\r\n  const placeWordsInGrid = (grid) => {\r\n    clues.forEach((clue) => {\r\n      const word = clue.word;\r\n      let placed = false;\r\n      while (!placed) {\r\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\r\n        const row = Math.floor(Math.random() * gridSize);\r\n        const col = Math.floor(Math.random() * gridSize);\r\n\r\n        if (canPlaceWord(word, row, col, direction, grid)) {\r\n          placeWord(word, row, col, direction, grid);\r\n          placed = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const canPlaceWord = (word, row, col, direction, grid) => {\r\n    if (direction === 0 && col + word.length > gridSize) return false;\r\n    if (direction === 1 && row + word.length > gridSize) return false;\r\n    if (\r\n      direction === 2 &&\r\n      (row + word.length > gridSize || col + word.length > gridSize)\r\n    )\r\n      return false;\r\n\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      if (\r\n        grid[currentRow][currentCol] !== \"\" &&\r\n        grid[currentRow][currentCol] !== word[i]\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const placeWord = (word, row, col, direction, grid) => {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      grid[currentRow][currentCol] = word[i];\r\n    }\r\n  };\r\n\r\n  // Fill the remaining cells with random letters\r\n  const fillGridWithRandomLetters = (grid) => {\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        if (grid[row][col] === \"\") {\r\n          grid[row][col] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize the grid when the component mounts\r\n  useEffect(() => {\r\n    const newGrid = createEmptyGrid();\r\n    placeWordsInGrid(newGrid);\r\n    fillGridWithRandomLetters(newGrid);\r\n    setGrid(newGrid);\r\n  }, [clues]);\r\n\r\n  // Handle user selection of cells\r\n  const handleCellClick = (row, col) => {\r\n    const cellIndex = selectedCells.findIndex(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (cellIndex !== -1) {\r\n      // Deselect if already selected\r\n      const newSelection = [...selectedCells];\r\n      newSelection.splice(cellIndex, 1);\r\n      setSelectedCells(newSelection);\r\n    } else {\r\n      // Add to selection\r\n      setSelectedCells([...selectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  // Clear the current selection\r\n  const clearSelection = () => {\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  // Check if the selected cells form a valid word\r\n  useEffect(() => {\r\n    const selectedWord = selectedCells\r\n      .map(({ row, col }) => grid[row][col])\r\n      .join(\"\");\r\n    const foundClue = clues.find((clue) => clue.word === selectedWord);\r\n\r\n    if (foundClue) {\r\n      setFoundWords([...foundWords, foundClue.word]);\r\n      setSelectedCells([]);\r\n    }\r\n  }, [selectedCells]);\r\n  const allWordsFound = foundWords.length === clues.length;\r\n\r\n  const goToNextPage = () => {\r\n    navigate(\"/Sandhangan/kuis5/ngaturukarasandhangan\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"wordsearch\">\r\n      <h1>Nggoleki Tembang Sandhangan</h1>\r\n\r\n      <div className=\"wordsearch-clues\">\r\n        {clues.map((clue, index) => (\r\n          <div key={index} className=\"clue\">\r\n            <img src={clue.image} alt={clue.word} style={{ width: \"50px\" }} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"wordsearch-container\">\r\n        <div className=\"wordsearch-grid\">\r\n          {grid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordsearch-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`cell ${\r\n                    selectedCells.find(\r\n                      (c) => c.row === rowIndex && c.col === colIndex\r\n                    )\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"wordsearch-found-words\">\r\n          <h2>Kata:</h2>\r\n          {foundWords.map((word, index) => (\r\n            <div key={index}>{word}</div>\r\n          ))}\r\n\r\n          {allWordsFound && (\r\n            <button onClick={goToNextPage} className=\"next-page-button\">\r\n              Next Page\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <button onClick={clearSelection}>Clear Selection</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}