{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cluesInputShapeOriginal = exports.clueShapeOriginal = void 0;\nconst prop_types_1 = __importDefault(require(\"prop-types\"));\n// We draw a distinction between the clue \"input\" data (which must be provided\n// by the consumer), and the in-progress clue/game data that includes answer\n// status, \"correct\" values, etc.  Also, while there's only one version of the\n// in-progress data (meant only to be consumed by the react-crossword\n// components), there is *potentially* more than one input format for\n// clues/answers.\n/**\n * Clue/answer for a single across or down clue.\n */\nconst clueInputPropsOriginal = {\n  /** The clue to display */\n  clue: prop_types_1.default.string.isRequired,\n  /** The answer for the clue */\n  answer: prop_types_1.default.string.isRequired,\n  /** The 0-based row on which the answer begins */\n  row: prop_types_1.default.number.isRequired,\n  /** The 0-based column on which the answer begins */\n  col: prop_types_1.default.number.isRequired\n};\nexports.clueShapeOriginal = prop_types_1.default.shape(clueInputPropsOriginal);\nexports.cluesInputShapeOriginal = prop_types_1.default.shape({\n  /** \"across\" clues and answers */\n  across: prop_types_1.default.objectOf(exports.clueShapeOriginal.isRequired).isRequired,\n  /** \"down\" clues and answers */\n  down: prop_types_1.default.objectOf(exports.clueShapeOriginal.isRequired).isRequired\n});","map":{"version":3,"names":["prop_types_1","__importDefault","require","clueInputPropsOriginal","clue","default","string","isRequired","answer","row","number","col","exports","clueShapeOriginal","shape","cluesInputShapeOriginal","across","objectOf","down"],"sources":["C:\\Users\\Nabila\\Desktop\\aksara\\node_modules\\@jaredreisinger\\react-crossword\\src\\types.ts"],"sourcesContent":["import PropTypes, { InferProps } from 'prop-types';\n\nexport type OverrideProps<T, O> = Omit<T, keyof O> & O;\n\nexport type EnhancedProps<T, O> = OverrideProps<InferProps<T>, O>;\n\nexport type Direction = 'across' | 'down';\n\nexport interface GridPosition {\n  /** The 0-indexed row for the position. */\n  row: number;\n  /** The 0-indexed column for the position. */\n  col: number;\n}\n\n// We draw a distinction between the clue \"input\" data (which must be provided\n// by the consumer), and the in-progress clue/game data that includes answer\n// status, \"correct\" values, etc.  Also, while there's only one version of the\n// in-progress data (meant only to be consumed by the react-crossword\n// components), there is *potentially* more than one input format for\n// clues/answers.\n\n/**\n * Clue/answer for a single across or down clue.\n */\nconst clueInputPropsOriginal = {\n  /** The clue to display */\n  clue: PropTypes.string.isRequired,\n  /** The answer for the clue */\n  answer: PropTypes.string.isRequired,\n  /** The 0-based row on which the answer begins */\n  row: PropTypes.number.isRequired,\n  /** The 0-based column on which the answer begins */\n  col: PropTypes.number.isRequired,\n};\n\nexport const clueShapeOriginal = PropTypes.shape(clueInputPropsOriginal);\n\nexport type ClueTypeOriginal = InferProps<typeof clueInputPropsOriginal>;\n\nexport const cluesInputShapeOriginal = PropTypes.shape({\n  /** \"across\" clues and answers */\n  across: PropTypes.objectOf(clueShapeOriginal.isRequired).isRequired,\n  /** \"down\" clues and answers */\n  down: PropTypes.objectOf(clueShapeOriginal.isRequired).isRequired,\n});\n\n/**\n * The (original) input-format for clues and answers.  Note that while the\n * keys/properties under 'across' and 'down' are canonically the clue/answer\n * numbers, they can be *any* string value\n */\nexport type CluesInputOriginal = Record<\n  Direction,\n  Record<string, ClueTypeOriginal>\n>;\n\n/**\n * The input-format for clues and answers.  Only the original format is\n * currently available, but there may be some additional formats added in the\n * future.\n */\nexport type CluesInput = CluesInputOriginal;\n\n// in-progress game data...\n\n/**\n * The data stored/returned for a specific cell/position in the crossword.\n */\nexport type UsedCellData = GridPosition & {\n  /** Whether the position/cell is used at all. */\n  used: boolean;\n  // /** The clue related to this cell? what? Shouldn't be needed! */\n  // clue: string;\n  /** If present, a display \"number\" label for the cell */\n  number?: string;\n  /** The correct answer value for *only* this cell (a single letter) */\n  answer: string;\n  /** The user's guess value for *only* this cell (a single letter) */\n  guess?: string;\n  /** If present, the clue-number key for the \"across\" for this cell */\n  across?: string;\n  /** If present, the clue-number key for the \"down\" for this cell */\n  down?: string;\n};\n\n/**\n * The data stored/returned for a specific unused or out-of-bounds cell/position\n * in the crossword.\n */\nexport type UnusedCellData = GridPosition & {\n  /** Whether the position/cell is used at all. */\n  used: false;\n  /** Whether the position/cell is completely out-of-bounds */\n  outOfBounds?: boolean;\n};\n\n/**\n * The data stored/returned for a specific cell/position in the crossword.\n */\nexport type CellData = UsedCellData | UnusedCellData;\n\n// export type GridData = Record<number, Record<number, CellData>>;\nexport type GridData = CellData[][];\n\nexport type CluesData = Record<\n  Direction,\n  (ClueTypeOriginal & {\n    number: string;\n    complete?: boolean;\n    correct?: boolean;\n  })[]\n>;\n\nexport type AnswerTuple = [Direction, string, string];\n\n// interaction types\n\n/**\n * A handler to help set focus so that the core provider doesn't have to know\n * how a specific component mananges focus.\n */\nexport interface FocusHandler {\n  (): void;\n}\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,YAAA,GAAAC,eAAA,CAAAC,OAAA;AAeA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA,MAAMC,sBAAsB,GAAG;EAC7B;EACAC,IAAI,EAAEJ,YAAA,CAAAK,OAAS,CAACC,MAAM,CAACC,UAAU;EACjC;EACAC,MAAM,EAAER,YAAA,CAAAK,OAAS,CAACC,MAAM,CAACC,UAAU;EACnC;EACAE,GAAG,EAAET,YAAA,CAAAK,OAAS,CAACK,MAAM,CAACH,UAAU;EAChC;EACAI,GAAG,EAAEX,YAAA,CAAAK,OAAS,CAACK,MAAM,CAACH;CACvB;AAEYK,OAAA,CAAAC,iBAAiB,GAAGb,YAAA,CAAAK,OAAS,CAACS,KAAK,CAACX,sBAAsB,CAAC;AAI3DS,OAAA,CAAAG,uBAAuB,GAAGf,YAAA,CAAAK,OAAS,CAACS,KAAK,CAAC;EACrD;EACAE,MAAM,EAAEhB,YAAA,CAAAK,OAAS,CAACY,QAAQ,CAACL,OAAA,CAAAC,iBAAiB,CAACN,UAAU,CAAC,CAACA,UAAU;EACnE;EACAW,IAAI,EAAElB,YAAA,CAAAK,OAAS,CAACY,QAAQ,CAACL,OAAA,CAAAC,iBAAiB,CAACN,UAAU,CAAC,CAACA;CACxD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}