{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useNavigate}from\"react-router-dom\";import lakon from\"../../assets/image/kuis/lakon.png\";import sutradara from\"../../assets/image/kuis/sutradara.png\";import dalang from\"../../assets/image/kuis/dalang.png\";import sindhen from\"../../assets/image/kuis/sindhen.png\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NggolekiTembang=()=>{const initialClues=[{word:\"LAKON\",image:lakon},{word:\"SUTRADARA\",image:sutradara},{word:\"DALANG\",image:dalang},{word:\"SINDHEN\",image:sindhen}];const[gridSize,setGridSize]=useState(15);const[grid,setGrid]=useState([]);const[foundWords,setFoundWords]=useState([]);const[selectedCells,setSelectedCells]=useState([]);const[clues,setClues]=useState(initialClues);const navigate=useNavigate();// Utility function to create an empty grid\nconst createEmptyGrid=()=>{return Array.from({length:gridSize},()=>Array.from({length:gridSize},()=>\"\"));};// Place words into the grid\nconst placeWordsInGrid=grid=>{clues.forEach(clue=>{const word=clue.word;let placed=false;while(!placed){const direction=Math.floor(Math.random()*3);// 0 = horizontal, 1 = vertical, 2 = diagonal\nconst row=Math.floor(Math.random()*gridSize);const col=Math.floor(Math.random()*gridSize);if(canPlaceWord(word,row,col,direction,grid)){placeWord(word,row,col,direction,grid);placed=true;}}});};const canPlaceWord=(word,row,col,direction,grid)=>{if(direction===0&&col+word.length>gridSize)return false;if(direction===1&&row+word.length>gridSize)return false;if(direction===2&&(row+word.length>gridSize||col+word.length>gridSize))return false;for(let i=0;i<word.length;i++){const currentRow=row+(direction===1||direction===2?i:0);const currentCol=col+(direction===0||direction===2?i:0);if(grid[currentRow][currentCol]!==\"\"&&grid[currentRow][currentCol]!==word[i]){return false;}}return true;};const placeWord=(word,row,col,direction,grid)=>{for(let i=0;i<word.length;i++){const currentRow=row+(direction===1||direction===2?i:0);const currentCol=col+(direction===0||direction===2?i:0);grid[currentRow][currentCol]=word[i];}};// Fill the remaining cells with random letters\nconst fillGridWithRandomLetters=grid=>{for(let row=0;row<gridSize;row++){for(let col=0;col<gridSize;col++){if(grid[row][col]===\"\"){grid[row][col]=String.fromCharCode(65+Math.floor(Math.random()*26));}}}};// Initialize the grid when the component mounts\nuseEffect(()=>{const newGrid=createEmptyGrid();placeWordsInGrid(newGrid);fillGridWithRandomLetters(newGrid);setGrid(newGrid);},[clues,gridSize]);// Handle user selection of cells\nconst handleCellClick=(row,col)=>{const cellIndex=selectedCells.findIndex(cell=>cell.row===row&&cell.col===col);if(cellIndex!==-1){// Deselect if already selected\nconst newSelection=[...selectedCells];newSelection.splice(cellIndex,1);setSelectedCells(newSelection);}else{// Add to selection\nsetSelectedCells([...selectedCells,{row,col}]);}};// Clear the current selection\nconst clearSelection=()=>{setSelectedCells([]);};// Check if the selected cells form a valid word\nuseEffect(()=>{const selectedWord=selectedCells.map(_ref=>{let{row,col}=_ref;return grid[row][col];}).join(\"\");const foundClue=clues.find(clue=>clue.word===selectedWord);if(foundClue){setFoundWords([...foundWords,foundClue.word]);setSelectedCells([]);}},[selectedCells]);const allWordsFound=foundWords.length===clues.length;const goToNextPage=()=>{navigate(\"/Sandhangan/kuis5/ngaturukarasandhangan\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"wordsearch\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Nggoleki Tembang Sandhangan\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Goleki tembung sing cocog karo aksara sing ditampilake\"}),/*#__PURE__*/_jsx(\"div\",{className:\"wordsearch-clues\",children:clues.map((clue,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"wordsearch-clue\",children:/*#__PURE__*/_jsx(\"img\",{className:\"wordsearch-clue-image\",src:clue.image,alt:clue.word,style:{width:\"50px\"}})},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"wordsearch-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"wordsearch-grid\",style:{\"--grid-size\":gridSize},children:grid.map((row,rowIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"wordsearch-row\",children:row.map((letter,colIndex)=>/*#__PURE__*/_jsx(\"div\",{className:\"cell \".concat(selectedCells.find(c=>c.row===rowIndex&&c.col===colIndex)?\"selected\":\"\"),onClick:()=>handleCellClick(rowIndex,colIndex),children:letter},colIndex))},rowIndex))}),/*#__PURE__*/_jsx(\"button\",{onClick:clearSelection,children:\"Hapus Pilihan\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"wordsearch-found-words\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Kata:\"}),foundWords.map((word,index)=>/*#__PURE__*/_jsx(\"div\",{children:word},index)),allWordsFound&&/*#__PURE__*/_jsx(\"button\",{onClick:goToNextPage,className:\"next-page-button\",children:\"Next Page\"})]})]})]});};export default NggolekiTembang;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","lakon","sutradara","dalang","sindhen","jsx","_jsx","jsxs","_jsxs","NggolekiTembang","initialClues","word","image","gridSize","setGridSize","grid","setGrid","foundWords","setFoundWords","selectedCells","setSelectedCells","clues","setClues","navigate","createEmptyGrid","Array","from","length","placeWordsInGrid","forEach","clue","placed","direction","Math","floor","random","row","col","canPlaceWord","placeWord","i","currentRow","currentCol","fillGridWithRandomLetters","String","fromCharCode","newGrid","handleCellClick","cellIndex","findIndex","cell","newSelection","splice","clearSelection","selectedWord","map","_ref","join","foundClue","find","allWordsFound","goToNextPage","className","children","index","src","alt","style","width","rowIndex","letter","colIndex","concat","c","onClick"],"sources":["C:/Users/Nabila/Desktop/aksara/src/components/isikuissandhangan/NggolekiTembangSandhangan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport lakon from \"../../assets/image/kuis/lakon.png\";\r\nimport sutradara from \"../../assets/image/kuis/sutradara.png\";\r\nimport dalang from \"../../assets/image/kuis/dalang.png\";\r\nimport sindhen from \"../../assets/image/kuis/sindhen.png\";\r\nconst NggolekiTembang = () => {\r\n  const initialClues = [\r\n    { word: \"LAKON\", image: lakon },\r\n    { word: \"SUTRADARA\", image: sutradara },\r\n    { word: \"DALANG\", image: dalang },\r\n    { word: \"SINDHEN\", image: sindhen },\r\n  ];\r\n\r\n  const [gridSize, setGridSize] = useState(15);\r\n  const [grid, setGrid] = useState([]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [clues, setClues] = useState(initialClues);\r\n  const navigate = useNavigate();\r\n\r\n  // Utility function to create an empty grid\r\n  const createEmptyGrid = () => {\r\n    return Array.from({ length: gridSize }, () =>\r\n      Array.from({ length: gridSize }, () => \"\")\r\n    );\r\n  };\r\n\r\n  // Place words into the grid\r\n  const placeWordsInGrid = (grid) => {\r\n    clues.forEach((clue) => {\r\n      const word = clue.word;\r\n      let placed = false;\r\n      while (!placed) {\r\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\r\n        const row = Math.floor(Math.random() * gridSize);\r\n        const col = Math.floor(Math.random() * gridSize);\r\n\r\n        if (canPlaceWord(word, row, col, direction, grid)) {\r\n          placeWord(word, row, col, direction, grid);\r\n          placed = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const canPlaceWord = (word, row, col, direction, grid) => {\r\n    if (direction === 0 && col + word.length > gridSize) return false;\r\n    if (direction === 1 && row + word.length > gridSize) return false;\r\n    if (\r\n      direction === 2 &&\r\n      (row + word.length > gridSize || col + word.length > gridSize)\r\n    )\r\n      return false;\r\n\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      if (\r\n        grid[currentRow][currentCol] !== \"\" &&\r\n        grid[currentRow][currentCol] !== word[i]\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const placeWord = (word, row, col, direction, grid) => {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      grid[currentRow][currentCol] = word[i];\r\n    }\r\n  };\r\n\r\n  // Fill the remaining cells with random letters\r\n  const fillGridWithRandomLetters = (grid) => {\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        if (grid[row][col] === \"\") {\r\n          grid[row][col] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize the grid when the component mounts\r\n  useEffect(() => {\r\n    const newGrid = createEmptyGrid();\r\n    placeWordsInGrid(newGrid);\r\n    fillGridWithRandomLetters(newGrid);\r\n    setGrid(newGrid);\r\n  }, [clues, gridSize]);\r\n\r\n  // Handle user selection of cells\r\n  const handleCellClick = (row, col) => {\r\n    const cellIndex = selectedCells.findIndex(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (cellIndex !== -1) {\r\n      // Deselect if already selected\r\n      const newSelection = [...selectedCells];\r\n      newSelection.splice(cellIndex, 1);\r\n      setSelectedCells(newSelection);\r\n    } else {\r\n      // Add to selection\r\n      setSelectedCells([...selectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  // Clear the current selection\r\n  const clearSelection = () => {\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  // Check if the selected cells form a valid word\r\n  useEffect(() => {\r\n    const selectedWord = selectedCells\r\n      .map(({ row, col }) => grid[row][col])\r\n      .join(\"\");\r\n    const foundClue = clues.find((clue) => clue.word === selectedWord);\r\n\r\n    if (foundClue) {\r\n      setFoundWords([...foundWords, foundClue.word]);\r\n      setSelectedCells([]);\r\n    }\r\n  }, [selectedCells]);\r\n  const allWordsFound = foundWords.length === clues.length;\r\n\r\n  const goToNextPage = () => {\r\n    navigate(\"/Sandhangan/kuis5/ngaturukarasandhangan\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"wordsearch\">\r\n      <h1>Nggoleki Tembang Sandhangan</h1>\r\n      <h2>Goleki tembung sing cocog karo aksara sing ditampilake</h2>\r\n\r\n      <div className=\"wordsearch-clues\">\r\n        {clues.map((clue, index) => (\r\n          <div key={index} className=\"wordsearch-clue\">\r\n            <img\r\n              className=\"wordsearch-clue-image\"\r\n              src={clue.image}\r\n              alt={clue.word}\r\n              style={{ width: \"50px\" }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"wordsearch-container\">\r\n        <div className=\"wordsearch-grid\" style={{ \"--grid-size\": gridSize }}>\r\n          {grid.map((row, rowIndex) => (\r\n            <div key={rowIndex} className=\"wordsearch-row\">\r\n              {row.map((letter, colIndex) => (\r\n                <div\r\n                  key={colIndex}\r\n                  className={`cell ${\r\n                    selectedCells.find(\r\n                      (c) => c.row === rowIndex && c.col === colIndex\r\n                    )\r\n                      ? \"selected\"\r\n                      : \"\"\r\n                  }`}\r\n                  onClick={() => handleCellClick(rowIndex, colIndex)}\r\n                >\r\n                  {letter}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <button onClick={clearSelection}>Hapus Pilihan</button>\r\n        <div className=\"wordsearch-found-words\">\r\n          <h2>Kata:</h2>\r\n          {foundWords.map((word, index) => (\r\n            <div key={index}>{word}</div>\r\n          ))}\r\n\r\n          {allWordsFound && (\r\n            <button onClick={goToNextPage} className=\"next-page-button\">\r\n              Next Page\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}