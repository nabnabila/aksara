{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksara\\\\src\\\\components\\\\isikuispasanganmurda\\\\NggolekiTembangPasanganMurda.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WordSearch = () => {\n  _s();\n  const [grid, setGrid] = useState([]);\n  const [wordList, setWordList] = useState([\"REACT\", \"JAVASCRIPT\", \"HTML\", \"CSS\"]);\n  const [foundWords, setFoundWords] = useState([]);\n  useEffect(() => {\n    // Logika untuk membuat grid dan menempatkan kata-kata\n    generateGrid();\n  }, []);\n  const generateGrid = () => {\n    const size = 10; // Ukuran grid NxN\n    const newGrid = Array(size).fill().map(() => Array(size).fill(\"\"));\n\n    // Logika untuk menempatkan kata-kata ke dalam grid\n    wordList.forEach(word => {\n      // Menempatkan kata secara acak\n      placeWordInGrid(newGrid, word);\n    });\n\n    // Mengisi grid dengan huruf acak untuk ruang yang kosong\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (!newGrid[i][j]) {\n          newGrid[i][j] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n    setGrid(newGrid);\n  };\n  const placeWordInGrid = (grid, word) => {\n    // Logika untuk menempatkan kata di grid\n    // Ini bisa horizontal, vertikal, atau diagonal, tergantung pada keinginan\n    const size = grid.length;\n    const startRow = Math.floor(Math.random() * size);\n    const startCol = Math.floor(Math.random() * size);\n\n    // Coba menempatkan kata secara horizontal\n    if (startCol + word.length <= size) {\n      for (let i = 0; i < word.length; i++) {\n        grid[startRow][startCol + i] = word[i];\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Word Search Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${grid.length}, 40px)`\n      },\n      children: grid.map((row, rowIndex) => row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"40px\",\n          height: \"40px\",\n          border: \"1px solid black\",\n          textAlign: \"center\",\n          lineHeight: \"40px\"\n        },\n        children: letter\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Words to Find:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: wordList.map(word => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: word\n        }, word, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(WordSearch, \"RNXe3QcBynM4JtRBnU/O2xe1WT0=\");\n_c = WordSearch;\nexport default WordSearch;\nvar _c;\n$RefreshReg$(_c, \"WordSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WordSearch","_s","grid","setGrid","wordList","setWordList","foundWords","setFoundWords","generateGrid","size","newGrid","Array","fill","map","forEach","word","placeWordInGrid","i","j","String","fromCharCode","Math","floor","random","length","startRow","startCol","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","row","rowIndex","letter","colIndex","width","height","border","textAlign","lineHeight","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksara/src/components/isikuispasanganmurda/NggolekiTembangPasanganMurda.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst WordSearch = () => {\r\n  const [grid, setGrid] = useState([]);\r\n  const [wordList, setWordList] = useState([\r\n    \"REACT\",\r\n    \"JAVASCRIPT\",\r\n    \"HTML\",\r\n    \"CSS\",\r\n  ]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Logika untuk membuat grid dan menempatkan kata-kata\r\n    generateGrid();\r\n  }, []);\r\n\r\n  const generateGrid = () => {\r\n    const size = 10; // Ukuran grid NxN\r\n    const newGrid = Array(size)\r\n      .fill()\r\n      .map(() => Array(size).fill(\"\"));\r\n\r\n    // Logika untuk menempatkan kata-kata ke dalam grid\r\n    wordList.forEach((word) => {\r\n      // Menempatkan kata secara acak\r\n      placeWordInGrid(newGrid, word);\r\n    });\r\n\r\n    // Mengisi grid dengan huruf acak untuk ruang yang kosong\r\n    for (let i = 0; i < size; i++) {\r\n      for (let j = 0; j < size; j++) {\r\n        if (!newGrid[i][j]) {\r\n          newGrid[i][j] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  const placeWordInGrid = (grid, word) => {\r\n    // Logika untuk menempatkan kata di grid\r\n    // Ini bisa horizontal, vertikal, atau diagonal, tergantung pada keinginan\r\n    const size = grid.length;\r\n    const startRow = Math.floor(Math.random() * size);\r\n    const startCol = Math.floor(Math.random() * size);\r\n\r\n    // Coba menempatkan kata secara horizontal\r\n    if (startCol + word.length <= size) {\r\n      for (let i = 0; i < word.length; i++) {\r\n        grid[startRow][startCol + i] = word[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Word Search Game</h1>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${grid.length}, 40px)`,\r\n        }}\r\n      >\r\n        {grid.map((row, rowIndex) =>\r\n          row.map((letter, colIndex) => (\r\n            <div\r\n              key={`${rowIndex}-${colIndex}`}\r\n              style={{\r\n                width: \"40px\",\r\n                height: \"40px\",\r\n                border: \"1px solid black\",\r\n                textAlign: \"center\",\r\n                lineHeight: \"40px\",\r\n              }}\r\n            >\r\n              {letter}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n      <div>\r\n        <h2>Words to Find:</h2>\r\n        <ul>\r\n          {wordList.map((word) => (\r\n            <li key={word}>{word}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordSearch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}