{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = require(\"react\");\nconst prop_types_1 = __importDefault(require(\"prop-types\"));\nconst styled_components_1 = require(\"styled-components\");\nconst context_1 = require(\"./context\");\nconst cellPropTypes = {\n  /** the data specific to this cell */\n  cellData: prop_types_1.default.shape({\n    row: prop_types_1.default.number.isRequired,\n    col: prop_types_1.default.number.isRequired,\n    guess: prop_types_1.default.string,\n    number: prop_types_1.default.string,\n    answer: prop_types_1.default.string\n  }).isRequired,\n  /** whether this cell has focus */\n  focus: prop_types_1.default.bool,\n  /** whether this cell is highlighted */\n  highlight: prop_types_1.default.bool,\n  /** handler called when the cell is clicked */\n  onClick: prop_types_1.default.func\n};\n/**\n * An individual-letter answer cell within the crossword grid.\n *\n * A `Cell` lives inside the SVG for a\n * [`CrosswordGrid`](#/Complex%20layouts/CrosswordGrid), and renders at a\n * position determined by the `row`, `col`, and `cellSize` properties from\n * `cellData` and `renderContext`.\n */\nfunction Cell(_ref) {\n  let {\n    cellData,\n    onClick,\n    focus,\n    highlight\n  } = _ref;\n  const {\n    cellSize,\n    cellPadding,\n    cellInner,\n    cellHalf,\n    fontSize\n  } = (0, react_1.useContext)(context_1.CrosswordSizeContext);\n  const {\n    // gridBackground,\n    cellBackground,\n    cellBorder,\n    textColor,\n    numberColor,\n    focusBackground,\n    highlightBackground\n  } = (0, react_1.useContext)(styled_components_1.ThemeContext);\n  const handleClick = (0, react_1.useCallback)(event => {\n    event.preventDefault();\n    if (onClick) {\n      onClick(cellData);\n    }\n  }, [cellData, onClick]);\n  const {\n    row,\n    col,\n    guess,\n    number,\n    answer\n  } = cellData;\n  const x = col * cellSize;\n  const y = row * cellSize;\n  return (0, jsx_runtime_1.jsxs)(\"g\", Object.assign({\n    onClick: handleClick,\n    style: {\n      cursor: 'default',\n      fontSize: \"\".concat(fontSize, \"px\")\n    },\n    className: \"clue-cell\"\n  }, {\n    children: [(0, jsx_runtime_1.jsx)(\"rect\", {\n      x: x + cellPadding,\n      y: y + cellPadding,\n      width: cellInner,\n      height: cellInner,\n      fill: focus ? focusBackground : highlight ? highlightBackground : cellBackground,\n      stroke: cellBorder,\n      strokeWidth: cellSize / 50\n    }), number && (0, jsx_runtime_1.jsx)(\"text\", Object.assign({\n      x: x + cellPadding * 4,\n      y: y + cellPadding * 4,\n      textAnchor: \"start\",\n      dominantBaseline: \"hanging\",\n      style: {\n        fontSize: '50%',\n        fill: numberColor\n      }\n    }, {\n      children: number\n    })), (0, jsx_runtime_1.jsx)(\"text\", Object.assign({\n      x: x + cellHalf,\n      y: y + cellHalf + 1,\n      textAnchor: \"middle\",\n      dominantBaseline: \"middle\",\n      style: {\n        fill: textColor\n      },\n      className: answer === guess ? 'guess-text-correct' : 'guess-text-incorrect'\n    }, {\n      children: guess\n    }))]\n  }));\n}\nexports.default = Cell;\nCell.propTypes = cellPropTypes;\nCell.defaultProps = {\n  focus: false,\n  highlight: false,\n  onClick: null\n};","map":{"version":3,"names":["react_1","require","prop_types_1","__importDefault","styled_components_1","context_1","cellPropTypes","cellData","default","shape","row","number","isRequired","col","guess","string","answer","focus","bool","highlight","onClick","func","Cell","_ref","cellSize","cellPadding","cellInner","cellHalf","fontSize","useContext","CrosswordSizeContext","cellBackground","cellBorder","textColor","numberColor","focusBackground","highlightBackground","ThemeContext","handleClick","useCallback","event","preventDefault","x","y","jsx_runtime_1","jsxs","Object","assign","style","cursor","concat","className","children","jsx","width","height","fill","stroke","strokeWidth","textAnchor","dominantBaseline","exports","propTypes","defaultProps"],"sources":["C:\\Users\\Nabila\\Desktop\\aksara\\node_modules\\@jaredreisinger\\react-crossword\\src\\Cell.tsx"],"sourcesContent":["import React, { useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeContext } from 'styled-components';\n\nimport { CrosswordSizeContext } from './context';\nimport type { UsedCellData, EnhancedProps } from './types';\n\nconst cellPropTypes = {\n  /** the data specific to this cell */\n  cellData: PropTypes.shape({\n    row: PropTypes.number.isRequired,\n    col: PropTypes.number.isRequired,\n    guess: PropTypes.string, // .isRequired,\n    number: PropTypes.string,\n    answer: PropTypes.string,\n  }).isRequired,\n\n  /** whether this cell has focus */\n  focus: PropTypes.bool,\n\n  /** whether this cell is highlighted */\n  highlight: PropTypes.bool,\n\n  /** handler called when the cell is clicked */\n  onClick: PropTypes.func,\n};\n\nexport type CellProps = EnhancedProps<\n  typeof cellPropTypes,\n  {\n    /** the data specific to this cell */\n    cellData: UsedCellData;\n    /** handler called when the cell is clicked */\n    onClick?: (cellData: UsedCellData) => void;\n  }\n>;\n\n/**\n * An individual-letter answer cell within the crossword grid.\n *\n * A `Cell` lives inside the SVG for a\n * [`CrosswordGrid`](#/Complex%20layouts/CrosswordGrid), and renders at a\n * position determined by the `row`, `col`, and `cellSize` properties from\n * `cellData` and `renderContext`.\n */\nexport default function Cell({\n  cellData,\n  onClick,\n  focus,\n  highlight,\n}: CellProps) {\n  const { cellSize, cellPadding, cellInner, cellHalf, fontSize } =\n    useContext(CrosswordSizeContext);\n  const {\n    // gridBackground,\n    cellBackground,\n    cellBorder,\n    textColor,\n    numberColor,\n    focusBackground,\n    highlightBackground,\n  } = useContext(ThemeContext);\n\n  const handleClick = useCallback<React.MouseEventHandler>(\n    (event) => {\n      event.preventDefault();\n      if (onClick) {\n        onClick(cellData);\n      }\n    },\n    [cellData, onClick]\n  );\n\n  const { row, col, guess, number, answer } = cellData;\n\n  const x = col * cellSize;\n  const y = row * cellSize;\n\n  return (\n    <g\n      onClick={handleClick}\n      style={{ cursor: 'default', fontSize: `${fontSize}px` }}\n      className=\"clue-cell\"\n    >\n      <rect\n        x={x + cellPadding}\n        y={y + cellPadding}\n        width={cellInner}\n        height={cellInner}\n        fill={\n          focus\n            ? focusBackground\n            : highlight\n            ? highlightBackground\n            : cellBackground\n        }\n        stroke={cellBorder}\n        strokeWidth={cellSize / 50}\n      />\n      {number && (\n        <text\n          x={x + cellPadding * 4}\n          y={y + cellPadding * 4}\n          textAnchor=\"start\"\n          dominantBaseline=\"hanging\"\n          style={{ fontSize: '50%', fill: numberColor }}\n        >\n          {number}\n        </text>\n      )}\n      <text\n        x={x + cellHalf}\n        y={y + cellHalf + 1} // +1 for visual alignment?\n        textAnchor=\"middle\"\n        dominantBaseline=\"middle\"\n        style={{ fill: textColor }}\n        className={\n          answer === guess ? 'guess-text-correct' : 'guess-text-incorrect'\n        }\n      >\n        {guess}\n      </text>\n    </g>\n  );\n}\n\nCell.propTypes = cellPropTypes;\n\nCell.defaultProps = {\n  focus: false,\n  highlight: false,\n  onClick: null,\n};\n\n// export default Cell;\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAEA,MAAAI,SAAA,GAAAJ,OAAA;AAGA,MAAMK,aAAa,GAAG;EACpB;EACAC,QAAQ,EAAEL,YAAA,CAAAM,OAAS,CAACC,KAAK,CAAC;IACxBC,GAAG,EAAER,YAAA,CAAAM,OAAS,CAACG,MAAM,CAACC,UAAU;IAChCC,GAAG,EAAEX,YAAA,CAAAM,OAAS,CAACG,MAAM,CAACC,UAAU;IAChCE,KAAK,EAAEZ,YAAA,CAAAM,OAAS,CAACO,MAAM;IACvBJ,MAAM,EAAET,YAAA,CAAAM,OAAS,CAACO,MAAM;IACxBC,MAAM,EAAEd,YAAA,CAAAM,OAAS,CAACO;GACnB,CAAC,CAACH,UAAU;EAEb;EACAK,KAAK,EAAEf,YAAA,CAAAM,OAAS,CAACU,IAAI;EAErB;EACAC,SAAS,EAAEjB,YAAA,CAAAM,OAAS,CAACU,IAAI;EAEzB;EACAE,OAAO,EAAElB,YAAA,CAAAM,OAAS,CAACa;CACpB;AAYD;;;;;;;;AAQA,SAAwBC,IAAIA,CAAAC,IAAA,EAKhB;EAAA,IALiB;IAC3BhB,QAAQ;IACRa,OAAO;IACPH,KAAK;IACLE;EAAS,CACC,GAAAI,IAAA;EACV,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAQ,CAAE,GAC5D,IAAA5B,OAAA,CAAA6B,UAAU,EAACxB,SAAA,CAAAyB,oBAAoB,CAAC;EAClC,MAAM;IACJ;IACAC,cAAc;IACdC,UAAU;IACVC,SAAS;IACTC,WAAW;IACXC,eAAe;IACfC;EAAmB,CACpB,GAAG,IAAApC,OAAA,CAAA6B,UAAU,EAACzB,mBAAA,CAAAiC,YAAY,CAAC;EAE5B,MAAMC,WAAW,GAAG,IAAAtC,OAAA,CAAAuC,WAAW,EAC5BC,KAAK,IAAI;IACRA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAIrB,OAAO,EAAE;MACXA,OAAO,CAACb,QAAQ,CAAC;;EAErB,CAAC,EACD,CAACA,QAAQ,EAAEa,OAAO,CAAC,CACpB;EAED,MAAM;IAAEV,GAAG;IAAEG,GAAG;IAAEC,KAAK;IAAEH,MAAM;IAAEK;EAAM,CAAE,GAAGT,QAAQ;EAEpD,MAAMmC,CAAC,GAAG7B,GAAG,GAAGW,QAAQ;EACxB,MAAMmB,CAAC,GAAGjC,GAAG,GAAGc,QAAQ;EAExB,OACE,IAAAoB,aAAA,CAAAC,IAAA,OAAAC,MAAA,CAAAC,MAAA;IACE3B,OAAO,EAAEkB,WAAW;IACpBU,KAAK,EAAE;MAAEC,MAAM,EAAE,SAAS;MAAErB,QAAQ,KAAAsB,MAAA,CAAKtB,QAAQ;IAAI,CAAE;IACvDuB,SAAS,EAAC;EAAW;IAAAC,QAAA,GAErB,IAAAR,aAAA,CAAAS,GAAA;MACEX,CAAC,EAAEA,CAAC,GAAGjB,WAAW;MAClBkB,CAAC,EAAEA,CAAC,GAAGlB,WAAW;MAClB6B,KAAK,EAAE5B,SAAS;MAChB6B,MAAM,EAAE7B,SAAS;MACjB8B,IAAI,EACFvC,KAAK,GACDkB,eAAe,GACfhB,SAAS,GACTiB,mBAAmB,GACnBL,cAAc;MAEpB0B,MAAM,EAAEzB,UAAU;MAClB0B,WAAW,EAAElC,QAAQ,GAAG;IAAE,EAC1B,EACDb,MAAM,IACL,IAAAiC,aAAA,CAAAS,GAAA,UAAAP,MAAA,CAAAC,MAAA;MACEL,CAAC,EAAEA,CAAC,GAAGjB,WAAW,GAAG,CAAC;MACtBkB,CAAC,EAAEA,CAAC,GAAGlB,WAAW,GAAG,CAAC;MACtBkC,UAAU,EAAC,OAAO;MAClBC,gBAAgB,EAAC,SAAS;MAC1BZ,KAAK,EAAE;QAAEpB,QAAQ,EAAE,KAAK;QAAE4B,IAAI,EAAEtB;MAAW;IAAE;MAAAkB,QAAA,EAE5CzC;IAAM,GAEV,EACD,IAAAiC,aAAA,CAAAS,GAAA,UAAAP,MAAA,CAAAC,MAAA;MACEL,CAAC,EAAEA,CAAC,GAAGf,QAAQ;MACfgB,CAAC,EAAEA,CAAC,GAAGhB,QAAQ,GAAG,CAAC;MACnBgC,UAAU,EAAC,QAAQ;MACnBC,gBAAgB,EAAC,QAAQ;MACzBZ,KAAK,EAAE;QAAEQ,IAAI,EAAEvB;MAAS,CAAE;MAC1BkB,SAAS,EACPnC,MAAM,KAAKF,KAAK,GAAG,oBAAoB,GAAG;IAAsB;MAAAsC,QAAA,EAGjEtC;IAAK,GACD;EAAA,GACL;AAER;AA/EA+C,OAAA,CAAArD,OAAA,GAAAc,IAAA;AAiFAA,IAAI,CAACwC,SAAS,GAAGxD,aAAa;AAE9BgB,IAAI,CAACyC,YAAY,GAAG;EAClB9C,KAAK,EAAE,KAAK;EACZE,SAAS,EAAE,KAAK;EAChBC,OAAO,EAAE;CACV","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}