{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksara\\\\src\\\\components\\\\isikuissandhangan\\\\NggolekiTembangSandhangan.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport contohta from \"../../assets/image/aksara1/contohta.png\";\nimport contohca from \"../../assets/image/aksara1/contohca.png\";\nimport contohga from \"../../assets/image/aksara1/contohga.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NggolekiTembang = () => {\n  _s();\n  const initialClues = [{\n    word: \"TARI\",\n    image: contohta\n  }, {\n    word: \"MACA\",\n    image: contohca\n  }, {\n    word: \"GAWA\",\n    image: contohga\n  }];\n  const gridSize = 10;\n  const [grid, setGrid] = useState([]);\n  const [foundWords, setFoundWords] = useState([]);\n  const [selectedCells, setSelectedCells] = useState([]);\n  const [clues, setClues] = useState(initialClues);\n\n  // Utility function to create an empty grid\n  const createEmptyGrid = () => {\n    return Array.from({\n      length: gridSize\n    }, () => Array.from({\n      length: gridSize\n    }, () => \"\"));\n  };\n\n  // Place words into the grid\n  const placeWordsInGrid = grid => {\n    clues.forEach(clue => {\n      const word = clue.word;\n      let placed = false;\n      while (!placed) {\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\n        const row = Math.floor(Math.random() * gridSize);\n        const col = Math.floor(Math.random() * gridSize);\n        if (canPlaceWord(word, row, col, direction, grid)) {\n          placeWord(word, row, col, direction, grid);\n          placed = true;\n        }\n      }\n    });\n  };\n  const canPlaceWord = (word, row, col, direction, grid) => {\n    if (direction === 0 && col + word.length > gridSize) return false;\n    if (direction === 1 && row + word.length > gridSize) return false;\n    if (direction === 2 && (row + word.length > gridSize || col + word.length > gridSize)) return false;\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      if (grid[currentRow][currentCol] !== \"\" && grid[currentRow][currentCol] !== word[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const placeWord = (word, row, col, direction, grid) => {\n    for (let i = 0; i < word.length; i++) {\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\n      grid[currentRow][currentCol] = word[i];\n    }\n  };\n\n  // Fill the remaining cells with random letters\n  const fillGridWithRandomLetters = grid => {\n    for (let row = 0; row < gridSize; row++) {\n      for (let col = 0; col < gridSize; col++) {\n        if (grid[row][col] === \"\") {\n          grid[row][col] = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n        }\n      }\n    }\n  };\n\n  // Initialize the grid when the component mounts\n  useEffect(() => {\n    const newGrid = createEmptyGrid();\n    placeWordsInGrid(newGrid);\n    fillGridWithRandomLetters(newGrid);\n    setGrid(newGrid);\n  }, [clues]);\n\n  // Handle user selection of cells\n  const handleCellClick = (row, col) => {\n    const cellIndex = selectedCells.findIndex(cell => cell.row === row && cell.col === col);\n    if (cellIndex !== -1) {\n      // Deselect if already selected\n      const newSelection = [...selectedCells];\n      newSelection.splice(cellIndex, 1);\n      setSelectedCells(newSelection);\n    } else {\n      // Add to selection\n      setSelectedCells([...selectedCells, {\n        row,\n        col\n      }]);\n    }\n  };\n\n  // Clear the current selection\n  const clearSelection = () => {\n    setSelectedCells([]);\n  };\n\n  // Check if the selected cells form a valid word\n  useEffect(() => {\n    const selectedWord = selectedCells.map(({\n      row,\n      col\n    }) => grid[row][col]).join(\"\");\n    const foundClue = clues.find(clue => clue.word === selectedWord);\n    if (foundClue) {\n      setFoundWords([...foundWords, foundClue.word]);\n      setSelectedCells([]);\n    }\n  }, [selectedCells]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordsearch\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Nggoleki Tembang Nglegena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-clues\",\n      children: clues.map((clue, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clue\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: clue.image,\n          alt: clue.word,\n          style: {\n            width: \"50px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wordsearch-row\",\n        children: row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${selectedCells.find(c => c.row === rowIndex && c.col === colIndex) ? \"selected\" : \"\"}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: letter\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearSelection,\n      children: \"Clear Selection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordsearch-found-words\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Kata:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), foundWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: word\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(NggolekiTembang, \"xjLj/T6GViF1gPW1L3PKQK9ZJfo=\");\n_c = NggolekiTembang;\nexport default NggolekiTembang;\nvar _c;\n$RefreshReg$(_c, \"NggolekiTembang\");","map":{"version":3,"names":["React","useState","useEffect","contohta","contohca","contohga","jsxDEV","_jsxDEV","NggolekiTembang","_s","initialClues","word","image","gridSize","grid","setGrid","foundWords","setFoundWords","selectedCells","setSelectedCells","clues","setClues","createEmptyGrid","Array","from","length","placeWordsInGrid","forEach","clue","placed","direction","Math","floor","random","row","col","canPlaceWord","placeWord","i","currentRow","currentCol","fillGridWithRandomLetters","String","fromCharCode","newGrid","handleCellClick","cellIndex","findIndex","cell","newSelection","splice","clearSelection","selectedWord","map","join","foundClue","find","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","style","width","rowIndex","letter","colIndex","c","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksara/src/components/isikuissandhangan/NggolekiTembangSandhangan.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport contohta from \"../../assets/image/aksara1/contohta.png\";\r\nimport contohca from \"../../assets/image/aksara1/contohca.png\";\r\nimport contohga from \"../../assets/image/aksara1/contohga.png\";\r\n\r\nconst NggolekiTembang = () => {\r\n  const initialClues = [\r\n    { word: \"TARI\", image: contohta },\r\n    { word: \"MACA\", image: contohca },\r\n    { word: \"GAWA\", image: contohga },\r\n  ];\r\n\r\n  const gridSize = 10;\r\n  const [grid, setGrid] = useState([]);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [selectedCells, setSelectedCells] = useState([]);\r\n  const [clues, setClues] = useState(initialClues);\r\n\r\n  // Utility function to create an empty grid\r\n  const createEmptyGrid = () => {\r\n    return Array.from({ length: gridSize }, () =>\r\n      Array.from({ length: gridSize }, () => \"\")\r\n    );\r\n  };\r\n\r\n  // Place words into the grid\r\n  const placeWordsInGrid = (grid) => {\r\n    clues.forEach((clue) => {\r\n      const word = clue.word;\r\n      let placed = false;\r\n      while (!placed) {\r\n        const direction = Math.floor(Math.random() * 3); // 0 = horizontal, 1 = vertical, 2 = diagonal\r\n        const row = Math.floor(Math.random() * gridSize);\r\n        const col = Math.floor(Math.random() * gridSize);\r\n\r\n        if (canPlaceWord(word, row, col, direction, grid)) {\r\n          placeWord(word, row, col, direction, grid);\r\n          placed = true;\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const canPlaceWord = (word, row, col, direction, grid) => {\r\n    if (direction === 0 && col + word.length > gridSize) return false;\r\n    if (direction === 1 && row + word.length > gridSize) return false;\r\n    if (\r\n      direction === 2 &&\r\n      (row + word.length > gridSize || col + word.length > gridSize)\r\n    )\r\n      return false;\r\n\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      if (\r\n        grid[currentRow][currentCol] !== \"\" &&\r\n        grid[currentRow][currentCol] !== word[i]\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const placeWord = (word, row, col, direction, grid) => {\r\n    for (let i = 0; i < word.length; i++) {\r\n      const currentRow = row + (direction === 1 || direction === 2 ? i : 0);\r\n      const currentCol = col + (direction === 0 || direction === 2 ? i : 0);\r\n      grid[currentRow][currentCol] = word[i];\r\n    }\r\n  };\r\n\r\n  // Fill the remaining cells with random letters\r\n  const fillGridWithRandomLetters = (grid) => {\r\n    for (let row = 0; row < gridSize; row++) {\r\n      for (let col = 0; col < gridSize; col++) {\r\n        if (grid[row][col] === \"\") {\r\n          grid[row][col] = String.fromCharCode(\r\n            65 + Math.floor(Math.random() * 26)\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize the grid when the component mounts\r\n  useEffect(() => {\r\n    const newGrid = createEmptyGrid();\r\n    placeWordsInGrid(newGrid);\r\n    fillGridWithRandomLetters(newGrid);\r\n    setGrid(newGrid);\r\n  }, [clues]);\r\n\r\n  // Handle user selection of cells\r\n  const handleCellClick = (row, col) => {\r\n    const cellIndex = selectedCells.findIndex(\r\n      (cell) => cell.row === row && cell.col === col\r\n    );\r\n\r\n    if (cellIndex !== -1) {\r\n      // Deselect if already selected\r\n      const newSelection = [...selectedCells];\r\n      newSelection.splice(cellIndex, 1);\r\n      setSelectedCells(newSelection);\r\n    } else {\r\n      // Add to selection\r\n      setSelectedCells([...selectedCells, { row, col }]);\r\n    }\r\n  };\r\n\r\n  // Clear the current selection\r\n  const clearSelection = () => {\r\n    setSelectedCells([]);\r\n  };\r\n\r\n  // Check if the selected cells form a valid word\r\n  useEffect(() => {\r\n    const selectedWord = selectedCells\r\n      .map(({ row, col }) => grid[row][col])\r\n      .join(\"\");\r\n    const foundClue = clues.find((clue) => clue.word === selectedWord);\r\n\r\n    if (foundClue) {\r\n      setFoundWords([...foundWords, foundClue.word]);\r\n      setSelectedCells([]);\r\n    }\r\n  }, [selectedCells]);\r\n\r\n  return (\r\n    <div className=\"wordsearch\">\r\n      <h1>Nggoleki Tembang Nglegena</h1>\r\n\r\n      {/* Display the images as clues */}\r\n      <div className=\"wordsearch-clues\">\r\n        {clues.map((clue, index) => (\r\n          <div key={index} className=\"clue\">\r\n            <img src={clue.image} alt={clue.word} style={{ width: \"50px\" }} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Display the grid */}\r\n      <div className=\"wordsearch-grid\">\r\n        {grid.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"wordsearch-row\">\r\n            {row.map((letter, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                className={`cell ${\r\n                  selectedCells.find(\r\n                    (c) => c.row === rowIndex && c.col === colIndex\r\n                  )\r\n                    ? \"selected\"\r\n                    : \"\"\r\n                }`}\r\n                onClick={() => handleCellClick(rowIndex, colIndex)}\r\n              >\r\n                {letter}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Clear selection button */}\r\n      <button onClick={clearSelection}>Clear Selection</button>\r\n\r\n      {/* Display found words */}\r\n      <div className=\"wordsearch-found-words\">\r\n        <h2>Kata:</h2>\r\n        {foundWords.map((word, index) => (\r\n          <div key={index}>{word}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}