{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nabila\\\\Desktop\\\\aksara\\\\src\\\\components\\\\isikuisnglegena\\\\NggolekiTembangNglegena.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NggolekiTembang = () => {\n  _s();\n  const grid = [[\"C\", \"A\", \"T\", \"S\"], [\"D\", \"O\", \"G\", \"S\"], [\"R\", \"A\", \"T\", \"S\"], [\"B\", \"A\", \"T\", \"S\"]];\n  const words = [\"CATS\", \"DOGS\", \"RATS\", \"BATS\"];\n  const clues = {\n    CATS: \"/path/to/cat_image.jpg\",\n    DOGS: \"/path/to/dog_image.jpg\",\n    RATS: \"/path/to/rat_image.jpg\",\n    BATS: \"/path/to/bat_image.jpg\"\n  };\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [foundWords, setFoundWords] = useState([]);\n  const checkWord = selectedWord => {\n    let wordExists = false;\n\n    // Cek horizontal\n    for (let i = 0; i < grid.length; i++) {\n      if (grid[i].join(\"\") === selectedWord) {\n        wordExists = true;\n      }\n    }\n\n    // Cek vertikal\n    for (let i = 0; i < grid[0].length; i++) {\n      let verticalWord = \"\";\n      for (let j = 0; j < grid.length; j++) {\n        verticalWord += grid[j][i];\n      }\n      if (verticalWord === selectedWord) {\n        wordExists = true;\n      }\n    }\n    if (wordExists) {\n      setFoundWords([...foundWords, selectedWord]);\n    }\n  };\n  useEffect(() => {\n    if (selectedWord) {\n      checkWord(selectedWord);\n    }\n  }, [selectedWord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-search-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-search-grid\",\n      children: grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word-search-row\",\n        children: row.map((letter, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-search-cell\",\n          children: letter\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-search-clues\",\n      children: words.map(word => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: clues[word],\n        alt: word,\n        onClick: () => setSelectedWord(word),\n        className: `word-search-clue-image ${selectedWord === word ? \"selected\" : \"\"}`\n      }, word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-search-found-words\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Words Found:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: foundWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: word\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(NggolekiTembang, \"ZD6Q6VlJutzvKP4AB3jxbyCZtPM=\");\n_c = NggolekiTembang;\nexport default NggolekiTembang;\nvar _c;\n$RefreshReg$(_c, \"NggolekiTembang\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NggolekiTembang","_s","grid","words","clues","CATS","DOGS","RATS","BATS","selectedWord","setSelectedWord","foundWords","setFoundWords","checkWord","wordExists","i","length","join","verticalWord","j","className","children","map","row","rowIndex","letter","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","word","src","alt","onClick","index","_c","$RefreshReg$"],"sources":["C:/Users/Nabila/Desktop/aksara/src/components/isikuisnglegena/NggolekiTembangNglegena.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst NggolekiTembang = () => {\r\n  const grid = [\r\n    [\"C\", \"A\", \"T\", \"S\"],\r\n    [\"D\", \"O\", \"G\", \"S\"],\r\n    [\"R\", \"A\", \"T\", \"S\"],\r\n    [\"B\", \"A\", \"T\", \"S\"],\r\n  ];\r\n\r\n  const words = [\"CATS\", \"DOGS\", \"RATS\", \"BATS\"];\r\n  const clues = {\r\n    CATS: \"/path/to/cat_image.jpg\",\r\n    DOGS: \"/path/to/dog_image.jpg\",\r\n    RATS: \"/path/to/rat_image.jpg\",\r\n    BATS: \"/path/to/bat_image.jpg\",\r\n  };\r\n\r\n  const [selectedWord, setSelectedWord] = useState(null);\r\n  const [foundWords, setFoundWords] = useState([]);\r\n\r\n  const checkWord = (selectedWord) => {\r\n    let wordExists = false;\r\n\r\n    // Cek horizontal\r\n    for (let i = 0; i < grid.length; i++) {\r\n      if (grid[i].join(\"\") === selectedWord) {\r\n        wordExists = true;\r\n      }\r\n    }\r\n\r\n    // Cek vertikal\r\n    for (let i = 0; i < grid[0].length; i++) {\r\n      let verticalWord = \"\";\r\n      for (let j = 0; j < grid.length; j++) {\r\n        verticalWord += grid[j][i];\r\n      }\r\n      if (verticalWord === selectedWord) {\r\n        wordExists = true;\r\n      }\r\n    }\r\n\r\n    if (wordExists) {\r\n      setFoundWords([...foundWords, selectedWord]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedWord) {\r\n      checkWord(selectedWord);\r\n    }\r\n  }, [selectedWord]);\r\n\r\n  return (\r\n    <div className=\"word-search-game\">\r\n      <div className=\"word-search-grid\">\r\n        {grid.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"word-search-row\">\r\n            {row.map((letter, colIndex) => (\r\n              <div key={colIndex} className=\"word-search-cell\">\r\n                {letter}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"word-search-clues\">\r\n        {words.map((word) => (\r\n          <img\r\n            key={word}\r\n            src={clues[word]}\r\n            alt={word}\r\n            onClick={() => setSelectedWord(word)}\r\n            className={`word-search-clue-image ${\r\n              selectedWord === word ? \"selected\" : \"\"\r\n            }`}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"word-search-found-words\">\r\n        <h3>Words Found:</h3>\r\n        <ul>\r\n          {foundWords.map((word, index) => (\r\n            <li key={index}>{word}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NggolekiTembang;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}