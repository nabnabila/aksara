{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CrosswordSizeContext = exports.CrosswordContext = void 0;\nconst react_1 = __importDefault(require(\"react\"));\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n/**\n * CrosswordContext represents the crossword puzzle itself, as well as provides\n * callbacks for the core implementation of crossword user-interaction logic.\n * This ensures that any number of individual components can leverage a single\n * core implementation.\n */\nexports.CrosswordContext = react_1.default.createContext({\n  rows: 0,\n  cols: 0,\n  gridData: [],\n  // clues: { across: [], down: [] },\n  handleInputKeyDown: nop,\n  handleInputChange: nop,\n  handleCellClick: nop,\n  handleInputClick: nop,\n  handleClueSelected: nop,\n  registerFocusHandler: nop,\n  focused: false,\n  selectedPosition: {\n    row: 0,\n    col: 0\n  },\n  selectedDirection: 'across',\n  selectedNumber: '',\n  crosswordCorrect: false\n});\nexports.CrosswordSizeContext = react_1.default.createContext({\n  cellSize: 0,\n  cellPadding: 0,\n  cellInner: 0,\n  cellHalf: 0,\n  fontSize: 0\n});","map":{"version":3,"names":["react_1","__importDefault","require","nop","exports","CrosswordContext","default","createContext","rows","cols","gridData","handleInputKeyDown","handleInputChange","handleCellClick","handleInputClick","handleClueSelected","registerFocusHandler","focused","selectedPosition","row","col","selectedDirection","selectedNumber","crosswordCorrect","CrosswordSizeContext","cellSize","cellPadding","cellInner","cellHalf","fontSize"],"sources":["C:\\Users\\Nabila\\Desktop\\aksara\\node_modules\\@jaredreisinger\\react-crossword\\src\\context.ts"],"sourcesContent":["import React from 'react';\n\nimport type {\n  CellData,\n  CluesData,\n  Direction,\n  FocusHandler,\n  GridData,\n  GridPosition,\n} from './types';\n\n/**\n * CrosswordContextType represents the type of the crossword puzzle itself, as\n * well as provides callbacks for the core implementation of crossword\n * user-interaction logic. This ensures that any number of individual components\n * can leverage a single core implementation.\n */\nexport interface CrosswordContextType {\n  /** The number of rows in the crossword. */\n  rows: number;\n  /** The number of columns in the crossword. */\n  cols: number;\n  /** The crossword grid data, including player guesses and \"correct\" status. */\n  gridData: GridData;\n  /** The across/down clues, including \"correct\" status. */\n  clues?: CluesData;\n\n  /** A handler for `<input>` element KeyDown events. */\n  handleInputKeyDown: React.KeyboardEventHandler<HTMLInputElement>;\n  /** A handler for `<input>` element Change events. */\n  handleInputChange: React.ChangeEventHandler<HTMLInputElement>;\n  /** A handler for clicks on any cell in the crossword. */\n  handleCellClick: (cellData: CellData) => void;\n  /** A handler for `<input>` element Click events. */\n  handleInputClick: React.MouseEventHandler<HTMLInputElement>;\n  /** A handler for clue selection. */\n  handleClueSelected: (direction: Direction, number: string) => void;\n  /** Provides registration for focus actions */\n  registerFocusHandler: (focusHandler: FocusHandler | null) => void;\n\n  // player state\n  focused: boolean;\n  selectedPosition: GridPosition;\n  selectedDirection: Direction;\n  selectedNumber: string;\n\n  crosswordCorrect: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction nop() {}\n\n/**\n * CrosswordContext represents the crossword puzzle itself, as well as provides\n * callbacks for the core implementation of crossword user-interaction logic.\n * This ensures that any number of individual components can leverage a single\n * core implementation.\n */\nexport const CrosswordContext = React.createContext<CrosswordContextType>({\n  rows: 0,\n  cols: 0,\n  gridData: [],\n  // clues: { across: [], down: [] },\n\n  handleInputKeyDown: nop,\n  handleInputChange: nop,\n  handleCellClick: nop,\n  handleInputClick: nop,\n  handleClueSelected: nop,\n  registerFocusHandler: nop,\n\n  focused: false,\n  selectedPosition: { row: 0, col: 0 },\n  selectedDirection: 'across',\n  selectedNumber: '',\n\n  crosswordCorrect: false,\n});\n\nexport interface CrosswordSizeContextType {\n  cellSize: number;\n  cellPadding: number;\n  cellInner: number;\n  cellHalf: number;\n  fontSize: number;\n}\n\nexport const CrosswordSizeContext =\n  React.createContext<CrosswordSizeContextType>({\n    cellSize: 0,\n    cellPadding: 0,\n    cellInner: 0,\n    cellHalf: 0,\n    fontSize: 0,\n  });\n"],"mappings":";;;;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AAiDA;AACA,SAASC,GAAGA,CAAA,GAAI;AAEhB;;;;;;AAMaC,OAAA,CAAAC,gBAAgB,GAAGL,OAAA,CAAAM,OAAK,CAACC,aAAa,CAAuB;EACxEC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE,CAAC;EACPC,QAAQ,EAAE,EAAE;EACZ;EAEAC,kBAAkB,EAAER,GAAG;EACvBS,iBAAiB,EAAET,GAAG;EACtBU,eAAe,EAAEV,GAAG;EACpBW,gBAAgB,EAAEX,GAAG;EACrBY,kBAAkB,EAAEZ,GAAG;EACvBa,oBAAoB,EAAEb,GAAG;EAEzBc,OAAO,EAAE,KAAK;EACdC,gBAAgB,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAC,CAAE;EACpCC,iBAAiB,EAAE,QAAQ;EAC3BC,cAAc,EAAE,EAAE;EAElBC,gBAAgB,EAAE;CACnB,CAAC;AAUWnB,OAAA,CAAAoB,oBAAoB,GAC/BxB,OAAA,CAAAM,OAAK,CAACC,aAAa,CAA2B;EAC5CkB,QAAQ,EAAE,CAAC;EACXC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,CAAC;EACZC,QAAQ,EAAE,CAAC;EACXC,QAAQ,EAAE;CACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}